{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["import { translate_static, translate_dynamic } from './i18n.min.js'\n\n\"use strict\"\n\nconst jobLoc = document.querySelector(\".job\");\nconst jobLabelLoc = document.querySelector(\".job label\");\nconst jobInputLoc = document.querySelector(\".job input\");\nconst jobClearBtnLoc = jobLoc.querySelector(\".clear-btn\")\n\nconst cityLoc = document.querySelector(\".city\");\nconst cityListBtnLoc = document.querySelector(\".city .arrow-down\");\nconst cityListTitleLoc = document.querySelector(\".city .list-title\");\nconst citySelectedOptionsLoc = document.querySelector(\".city .selected-options\");\nconst cityListLoc = document.querySelector(\".city .list\");\n\nconst distanceLoc = document.querySelector(\".distance\");\nconst distanceListBtnLoc = document.querySelector(\".distance .arrow-down\");\nconst distanceListTitleLoc = document.querySelector(\".distance .list-title\");\nconst distanceListLoc = document.querySelector(\".distance .list\");\n\nconst sectorLoc = document.querySelector(\".sector\");\nconst sectorListBtnLoc = document.querySelector(\".sector .arrow-down\");\nconst sectorListTitleLoc = document.querySelector(\".sector .list-title\");\nconst sectorSelectedOptionsLoc = document.querySelector(\".sector .selected-options\");\nconst sectorListLoc = document.querySelector(\".sector .list\");\n\nconst employmentFormLoc = document.querySelector(\".employment-form\");\nconst employmentFormListBtnLoc = document.querySelector(\".employment-form .arrow-down\");\nconst employmentFormListTitleLoc = document.querySelector(\".employment-form .list-title\");\nconst employmentFormSelectedOptionsLoc = document.querySelector(\".employment-form .selected-options\");\nconst employmentFormListLoc = document.querySelector(\".employment-form .list\");\n\nconst workingHoursLoc = document.querySelector(\".working-hours\");\nconst workingHoursListBtnLoc = document.querySelector(\".working-hours .arrow-down\");\nconst workingHoursListTitleLoc = document.querySelector(\".working-hours .list-title\");\nconst workingHoursSelectedOptionsLoc = document.querySelector(\".working-hours .selected-options\");\nconst workingHoursListLoc = document.querySelector(\".working-hours .list\");\n\nconst languageLoc = document.querySelector(\".language\");\nconst languageListBtnLoc = document.querySelector(\".language .arrow-down\");\nconst languageListTitleLoc = document.querySelector(\".language .list-title\");\nconst languageSelectedOptionsLoc = document.querySelector(\".language .selected-options\");\nconst languageListLoc = document.querySelector(\".language .list\");\n\nconst awardedResultsLoc = document.querySelector(\".awarded\");\nconst recordsOnPageLoc = document.querySelector(\".records-on-page\");\nconst pagesSwitchLoc = document.querySelector(\".pages\");\nconst pagesContainer = document.querySelector(\".pages-container\");\nlet pageButtonsLoc = document.querySelectorAll(\".page\");\n\nconst brancheWrapperLoc = document.querySelector(\".sector\");\nconst branchesLoc = document.querySelector(\".sector ul\");\nconst jobFormLoc = document.querySelector(\".employment-form ul\"); \nconst jobTypeLoc = document.querySelector(\".working-hours ul\"); \nconst langLoc = document.querySelector(\".language ul\");\nconst citiesLoc = document.querySelector(\".city ul\");\nconst resultsLoc = document.querySelector(\".results\");\n\nconst remoteLoc = document.querySelector(\".remote\");\nconst remoteInputLoc = document.querySelector(\"#remote\");\nconst relocationLoc = document.querySelector(\".relocation\");\nconst relocationInputLoc = document.querySelector(\"#relocation\");\nconst searchInputLoc = document.querySelector(\".job input\");\n\nconst distanceInputsLoc = document.querySelectorAll(\".distance input\");\nconst distanceTitleLoc = document.querySelector(\".distance .list-title\");\n\nconst searchBtn = document.querySelector(\".search-btn\");\n\nconst advancedSearchBar = document.querySelector(\".wrapper.five\");\nconst advancedSearchBtn = document.querySelector(\".advanced-search-btn .arrow-down\");\nconst advancedContainer = document.querySelector(\".advanced-container\");\n\nlet lang =\"PL\"\n\n// Send data from iframe to parent ///////////////////////////////////////////\n// const setParentIframeHeight = () => {\n//     const iframeHeight = document.body.scrollHeight\n//     window.parent.postMessage(iframeHeight, 'https://miroslawrup7.github.io');\n// }\n\n// =====================\n\njobLoc.addEventListener(\"click\", (e) => {\n    jobLabelLoc.classList.add(\"mini\");\n    jobInputLoc.classList.add(\"active\");\n    jobClearBtnLoc.style.opacity = \"0.5\";\n    jobClearBtnLoc.style.display = \"flex\";\n})\n\njobInputLoc.addEventListener(\"blur\", (event) => {\n    if (!event.target.value) {\n        jobLabelLoc.classList.remove(\"mini\");\n        jobInputLoc.classList.remove(\"active\");\n        jobClearBtnLoc.style.opacity = \"0\";\n        jobClearBtnLoc.style.display = \"none\";\n    }\n})\n\njobClearBtnLoc.addEventListener(\"click\", (e) => {\n    e.stopPropagation()\n    jobInputLoc.value = \"\";\n    jobLabelLoc.classList.remove(\"mini\");\n    jobInputLoc.classList.remove(\"active\");\n    jobClearBtnLoc.style.opacity = \"0\";\n    jobClearBtnLoc.style.display = \"none\";\n    searchBtn.click();\n})\n\n// const removePaddingBottomToFilterList = (filterList) => {\n//     filterList.closest(\".element\").style.paddingBottom = \"\";\n//     filterList.closest(\".element\").style.boxShadow = \"\";\n//     filterList.closest(\".element\").style.height = \"\"\n// }\n\n// const addPaddingBottomToFilterList = (filterList) => {\n//     if (filterList.closest(\".element\").style.paddingBottom === \"\" ) {\n//         const listCount = Array.from(document.querySelector(\".list\").querySelectorAll(\"ul\")).reduce((count, ul) => count + ul.querySelectorAll(\"li\").length, 0);\n//         const liStyle = getComputedStyle(document.querySelector(\".list ul li\"));\n//         const liStyleMarginBottom = parseInt(liStyle.marginBottom.split(0,-2));\n//         const liStyleHeight = document.querySelector(\".list ul li\").offsetHeight;\n//         const titleHeight = document.querySelector(\".list-title\").offsetHeight;\n//         const totalCount = (listCount * (liStyleMarginBottom + liStyleHeight)) + titleHeight + (liStyleMarginBottom * 2);\n//         const listHeight = totalCount > 400 ? 400 : totalCount;\n        \n//         filterList.closest(\".element\").style.paddingBottom = \"15px\";\n//         filterList.closest(\".element\").style.boxShadow = \"0px 0px 3px rgba(0,0,0,0.1)\";\n//         filterList.closest(\".element\").style.height = listHeight +\"px\";\n//     } else {\n//         removePaddingBottomToFilterList(filterList);\n//     }\n// }\n\nconst dropDownListArray = [cityLoc, distanceLoc, sectorLoc, employmentFormLoc, workingHoursLoc, languageLoc]\n\ndropDownListArray.forEach((elem) => {\n    elem.querySelector(\".list-title\").addEventListener(\"click\", () => {\n        elem.querySelector(\".list\").classList.toggle(\"expand\");\n        elem.querySelector(\".arrow-down\").classList.toggle(\"rotate180\");\n        // addPaddingBottomToFilterList(elem.querySelector(\".list-title\"));\n    })\n})\n\ndropDownListArray.forEach((elem) => {\n    elem.addEventListener(\"mouseleave\", () => {\n        elem.querySelector(\".list\").classList.remove(\"expand\");\n        elem.querySelector(\".arrow-down\").classList.remove(\"rotate180\");\n        // removePaddingBottomToFilterList(elem.querySelector(\".list-title\"));\n    })\n})\n\n// document.addEventListener(\"touchstart\", function (event) {\n//     const target = event.target;\n//     const isTargetInArray = dropDownListArray.some(selector => {\n//         let expand = selector.querySelector('.expand');\n\n//         return selector.contains(expand) && !selector.contains(event.target);\n//       });\n  \n//     if (isTargetInArray) {\n//         dropDownListArray.forEach((elem) => {\n//             elem.querySelector(\".list\").classList.remove(\"expand\");\n//             elem.querySelector(\".arrow-down\").classList.remove(\"rotate180\");\n//             removePaddingBottomToFilterList(elem.querySelector(\".list-title\"));\n//         });\n//     }\n// })\n\nlet filterConfigData = {};\nlet apiPage = 1;\nlet rawAPIArray = [];\nlet allRecordsArray = [];\nlet recordsNumber = 0;\nlet firstRecordNumber = 0;\nlet recordsOnPage = 20;\nlet filtersON = false;\nlet filterBranchesList = [];\nlet filterJobFormList = [];\nlet filterJobTypeList = [];\nlet filterLangList = [];\nlet filterCountriesList = {};\nlet filteredRecordsArray_11;\nlet apiNumber\n\n// change distance label after choose\ndistanceInputsLoc.forEach((elem) => {\n    elem.addEventListener(\"change\", () => {\n        distanceTitleLoc.innerText = `+${Number(elem.value)} km`;\n        distanceTitleLoc.dataset.distance = Number(elem.value);\n        searchBtn.click();\n    })\n})\n\nrecordsOnPageLoc.value = recordsOnPage;\n\nconst filterListLocArray = [cityLoc, sectorLoc, employmentFormLoc, workingHoursLoc, languageLoc];\nlet selectedOptionsInFilterArray = [[],[],[],[],[],[]];\n\nconst setClearBtn = () => {\n    filterListLocArray.forEach((elem, index) => {\n\n        // selectedOptionsInFilterArray.push([]);\n    \n        const clearBtn = elem.querySelector(\".clear-btn\");\n        const filtersQuantityBtn = elem.querySelector(\".filters-quantity\");\n        const filtersSelectedOptions = elem.querySelector(\".selected-options\");\n        const filtersListTitle = elem.querySelector(\".list-title\");\n    \n        clearBtn.addEventListener(\"mouseenter\", () => {\n            if (selectedOptionsInFilterArray[index].length !== 0) {\n                filtersQuantityBtn.style.opacity = \"0\";\n                clearBtn.style.opacity = \"1\";\n            }\n        });\n        \n        clearBtn.addEventListener(\"mouseleave\", () => {\n            if (selectedOptionsInFilterArray[index].length !== 0) {\n                filtersQuantityBtn.style.opacity = \"1\";\n                clearBtn.style.opacity = \"0\";\n            }\n        });\n    \n        clearBtn.addEventListener(\"click\", () => {\n            if (selectedOptionsInFilterArray[index].length !== 0) {\n                selectedOptionsInFilterArray[index] = [];\n                clearBtn.style.opacity = \"0\";\n                elem.querySelectorAll(\"input\").forEach((el) => {\n                    el.checked = false;\n                })\n                filtersSelectedOptions.innerText = \"\";\n                filtersListTitle.classList.remove(\"mini\");\n                filtersQuantityBtn.style.opacity = \"0\";\n                searchBtn.click();\n            }\n        });\n    })\n}\n\nsetClearBtn()\n\nconst actionAfterFilterInputChange = (e) => {\n    const filterParentLoc = e.target.closest(\".drop-down-container\");\n    const filtersQuantityBtn = filterParentLoc.querySelector(\".filters-quantity\");\n    const filtersListTitleLoc = filterParentLoc.querySelector(\".list-title\");\n    const filtersSelectedOptionsLoc = filterParentLoc.querySelector(\".selected-options\");\n   \n    const indexFilter = filterListLocArray.indexOf(filterParentLoc);\n\n    if (e.target.checked) {\n        selectedOptionsInFilterArray[indexFilter].push(e.target.name);\n    } else {\n        const indexDeletedItem = selectedOptionsInFilterArray[indexFilter].indexOf(e.target.id);\n        selectedOptionsInFilterArray[indexFilter].splice(indexDeletedItem,1);\n    }\n\n    if (selectedOptionsInFilterArray[indexFilter].length !== 0) {\n        filtersListTitleLoc.classList.add(\"mini\");\n        filtersQuantityBtn.style.opacity = \"1\";\n        filtersQuantityBtn.innerText = selectedOptionsInFilterArray[indexFilter].length;\n    } else {\n        filtersListTitleLoc.classList.remove(\"mini\");\n        filtersQuantityBtn.style.opacity = \"0\";\n    }\n\n    filtersSelectedOptionsLoc.innerText = selectedOptionsInFilterArray[indexFilter].join(\", \");\n    searchBtn.click();\n}\n\nconst addListenerToFilterListsElements = () => {\n    \n    document.querySelectorAll(\".city ul input\").forEach((elem) => {\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\n    })\n    \n    document.querySelectorAll(\".sector ul input\").forEach((elem) => {\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\n    })\n\n    document.querySelectorAll(\".employment-form ul input\").forEach((elem) => {\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\n    })\n\n    document.querySelectorAll(\".working-hours ul input\").forEach((elem) => {\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\n    })\n\n    document.querySelectorAll(\".language ul input\").forEach((elem) => {\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\n    })\n\n};\n\n// create RECORDS BOXES ///////////////////////////////////////////////\nconst createRecordBoxes = (recordsArray, firstRecordNumber, recordsOnPage) => {\n    resultsLoc.replaceChildren();\n\n    for (let i = firstRecordNumber; i < recordsOnPage; i++) {\n        // colouring of records by type of recruitment\n\n        if (recordsArray[i]) {\n            let borderColorClass = \"\";\n            let textColorClass = \"\";\n            \n            if (Object.keys(filterConfigData).length !== 0 && filterConfigData.recruitmentType_colorOnly.length) {\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"PT\") !== -1) {\n                    if (recordsArray[i].recruitmentType === \"PT\") {\n                        borderColorClass = \"pt-border\";\n                        textColorClass = \"pt-text\";\n                    }\n                }\n\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"RS\") !== -1) {\n                    if (recordsArray[i].recruitmentType === \"RS\") {\n                        borderColorClass = \"rs-border\";\n                        textColorClass = \"rs-text\";\n                    }\n                }\n\n                if (filterConfigData.recruitmentType_colorOnly.indexOf(\"WEW\") !== -1) {\n                    if (recordsArray[i].recruitmentType === \"WEW\") {\n                        borderColorClass = \"wew-border\";\n                        textColorClass = \"wew-text\";\n                    }\n                }\n            } else {\n                if (recordsArray[i].recruitmentType === \"PT\") {\n                    borderColorClass = \"pt-border\";\n                    textColorClass = \"pt-text\";\n                }\n                if (recordsArray[i].recruitmentType === \"RS\") {\n                    borderColorClass = \"rs-border\";\n                    textColorClass = \"rs-text\";\n                }\n                if (recordsArray[i].recruitmentType === \"WEW\") {\n                    borderColorClass = \"wew-border\";\n                    textColorClass = \"wew-text\";\n                }\n            }\n\n            let formaZatrudnienia = \"\";\n\n            if (recordsArray[i].jobForm) {\n                recordsArray[i].jobForm.forEach(function (elem) {\n\n                const lang_PL_jobForm_id = translate_dynamic.forma[\"PL\"].indexOf(elem)\n                const jobForm_in_lang = translate_dynamic.forma[lang][lang_PL_jobForm_id]\n\n                    formaZatrudnienia = formaZatrudnienia + \"<p>\" + jobForm_in_lang + \"</p>\";\n                });\n            }\n\n            const lang_PL_branche_id = translate_dynamic.branza[\"PL\"].indexOf(recordsArray[i].branche)\n            const branche_in_lang = translate_dynamic.branza[lang][lang_PL_branche_id]\n\n            const lang_PL_jobType_id = translate_dynamic.wymiar[\"PL\"].indexOf(recordsArray[i].jobType)\n            const jobType_in_lang = translate_dynamic.wymiar[lang][lang_PL_jobType_id]\n\n            let remote_in_lang;\n            \n            if (recordsArray[i].remote === \"1\") {\n                remote_in_lang = translate_dynamic.zdalna[lang][0]\n            }\n\n            let relocation_in_lang;\n\n            if (recordsArray[i].relocation === \"1\") {\n                relocation_in_lang = translate_dynamic.relokacja[lang][0]\n            }\n\n            resultsLoc.insertAdjacentHTML(\"beforeend\", \n            `<a href=\"${recordsArray[i].url }\" target=\"_blank\">\n                <div class=\"result ${borderColorClass}\">\n                    <div class=\"top\">\n                        <div class=\"lang\"><p>${recordsArray[i].lang}</p></div>\n                        <div class=\"branche-name\">\n                            <div class=\"branche\">${branche_in_lang ? branche_in_lang : \"\" }</div>\n                            <div class=\"name ${textColorClass}\">${recordsArray[i].name}</div>\n                        </div>\n                    </div>\n\n                    <div class=\"bottom\">\n                        <div class=\"city-container\">\n                            <div class=\"city\"><img src=\"./img/location_dot.svg\">${recordsArray[i].city}</div>\n                        </div>\n                        <div class=\"details-container\">\n                            ${jobType_in_lang ? \"<div class='jobtype'>\" + jobType_in_lang + \"</div>\" : \"\"}\n                            ${recordsArray[i].visibleRate ? recordsArray[i].salaryFrom && recordsArray[i].salaryTo ? \"<div class='salary'>\" + recordsArray[i].salaryFrom + \" - \" + recordsArray[i].salaryTo + \"</div>\"  : \"\" : \"\"}\n                            ${remote_in_lang ? \"<div class='remote'>\" + remote_in_lang + \"</div>\" : \"\" }\n                            ${relocation_in_lang ? \"<div class='relocation'>\" + relocation_in_lang + \"</div>\" : \"\" }\n                            <div class=\"employmentform\">${formaZatrudnienia}</div>\n                        </div>\n                    </div>\n                   \n                </div>\n            </a>`\n            );\n        }\n    }\n    // setParentIframeHeight()\n};\n\nconst setPages = (recordsNumber) => {\n    pagesQuantityCalc = Math.ceil(recordsNumber / recordsOnPage);\n\n    if (pagesQuantityCalc > maxPageBtns) {\n        pagesSwitchLoc.replaceChildren();\n\n        for (let n=1; n <= maxPageBtns; n++) {\n            if (n === 1) {\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page active\">${n}</div>`);\n            } else {\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page\">${n}</div>`);\n            }\n        }\n        pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`);\n        let nextBtnLoc = document.querySelector(\".next\");\n        nextBtnLoc.addEventListener(\"click\", () => {\n            moveNextPagesBtns();\n        });\n    } else {\n        pagesSwitchLoc.replaceChildren();\n\n        for (let n=1; n <= pagesQuantityCalc; n++) {\n            if (n === 1) {\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page active\">${n}</div>`);\n            } else {\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"page\">${n}</div>`);\n            }\n        }\n        pagesSwitchLoc.insertAdjacentHTML(\"beforeend\",`<div class=\"next\"><img src=\"\" alt=\"\" /></div>`);\n    }\n\n    pagesSwitchLoc.insertAdjacentHTML(\"afterbegin\",`<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`);\n\n    pageButtonsLoc = document.querySelectorAll(\".page\");\n    pageButtonsLoc.forEach((el) => {\n        el.addEventListener(\"click\", (e) => {\n            changePage(e.target);\n        });\n    });\n    \n};\n\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\nconst createFilteredRecordsArray = () => {\n\n    const branchesChildrenLoc = branchesLoc.querySelectorAll(\"li input\");\n    const jobFormChildrenLoc = jobFormLoc.querySelectorAll(\"li input\");\n    const jobTypeChildrenLoc = jobTypeLoc.querySelectorAll(\"li input\");\n    const langChildrenLoc = langLoc.querySelectorAll(\"li input\");\n    const citiesChildrenLoc = citiesLoc.querySelectorAll(\"li input\");\n\n    let filteredRecordsArray = allRecordsArray;\n\n    // selectedBranches ////////////////\n    let selectedBranches = [];\n\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.branche_filter.length) {\n        selectedBranches = filterConfigData.branche_filter;\n\n        let selectedBranchesOnList = Array.from(branchesChildrenLoc).filter(function (elem) {\n            return elem.checked\n        })\n\n        if (selectedBranchesOnList.length > 0) {\n\n            selectedBranches = Array.from(branchesChildrenLoc)\n            .filter(function (elem) {\n                return elem.checked\n            })\n            .map(function (elem) {\n                return elem.id\n            })\n        }\n\n    } else {\n        selectedBranches = Array.from(branchesChildrenLoc)\n            .filter(function (elem) {\n                return elem.checked\n            })\n            .map(function (elem) {\n                return elem.id\n            })\n    }\n    \n    let filteredRecordsArray_1 = [];\n\n    if (selectedBranches.length !== 0) {\n        filteredRecordsArray.forEach((el, index) => {\n            let addFlag = false;\n\n            selectedBranches.forEach((selectedFiltr) => {\n                if (el.branche === selectedFiltr) {\n                    addFlag = true;\n                }\n            });\n\n            if (addFlag) {\n                filteredRecordsArray_1.push(el);\n            }\n        });\n    } else {\n        filteredRecordsArray_1 = filteredRecordsArray;\n    }\n\n    // selectedJobForms ////////////////\n    let selectedJobForms = [];\n\n    selectedJobForms = Array.from(jobFormChildrenLoc)\n        .filter(function (elem) {\n            return elem.checked;\n        })\n        .map(function (elem) {\n            return elem.id;\n        });\n\n    let filteredRecordsArray_2 = [];\n\n    if (selectedJobForms.length !== 0) {\n        filteredRecordsArray_1.forEach((el, index) => {\n            if (el.jobForm) {\n                let addFlag = false;\n\n                selectedJobForms.forEach((selectedFiltr) => {\n                    if (el.jobForm.indexOf(selectedFiltr) !== -1) {\n                        addFlag = true;\n                    }\n                });\n\n                if (addFlag) {\n                    filteredRecordsArray_2.push(el);\n                }\n            }\n        });\n    } else {\n        filteredRecordsArray_2 = filteredRecordsArray_1;\n    }\n\n    // selectedJobTypes ////////////////\n    let selectedjobTypes = Array.from(jobTypeChildrenLoc)\n        .filter(function (elem) {\n            return elem.checked;\n        })\n        .map(function (elem) {\n            return elem.id;\n        });\n\n    let filteredRecordsArray_3 = [];\n\n    if (selectedjobTypes.length !== 0) {\n        filteredRecordsArray_2.forEach((el, index) => {\n            let addFlag = false;\n\n            selectedjobTypes.forEach((selectedFiltr) => {\n                if (el.jobType === selectedFiltr) {\n                    addFlag = true;\n                }\n            });\n\n            if (addFlag) {\n                filteredRecordsArray_3.push(el);\n            }\n        });\n    } else {\n        filteredRecordsArray_3 = filteredRecordsArray_2;\n    }\n\n    // selectedLangs ////////////////\n    let selectedLangs = [];\n\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.language_filter.length) {\n        selectedLangs = filterConfigData.language_filter\n\n\n        let selectedLangsOnList = Array.from(langChildrenLoc).filter(function (elem) {\n            if (elem.value) {\n                return elem.checked\n            }\n        })\n\n        if (selectedLangsOnList.length > 0) {\n\n            selectedLangs = Array.from(langChildrenLoc)\n            .filter(function (elem) {\n                return elem.checked\n            })\n            .map(function (elem) {\n                return elem.value\n            })\n        }\n\n    } else {\n        selectedLangs = Array.from(langChildrenLoc)\n            .filter(function (elem) {\n                return elem.checked\n            })\n            .map(function (elem) {\n                return elem.value\n            });\n    } \n    \n    let filteredRecordsArray_4 = [];\n\n    if (selectedLangs.length !== 0) {\n        filteredRecordsArray_3.forEach((el, index) => {\n            let addFlag = false;\n\n            selectedLangs.forEach((selectedFiltr) => {\n                if (el.lang === selectedFiltr) {\n                    addFlag = true;\n                }\n            });\n\n            if (addFlag) {\n                filteredRecordsArray_4.push(el);\n            }\n        });\n    } else {\n        filteredRecordsArray_4 = filteredRecordsArray_3\n    }\n\n    // selectedCountry ////////////////\n\n    let selectedCountry = []\n    let filteredRecordsArray_5 = []\n\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_country_filter.length) {\n        selectedCountry = filterConfigData.location_country_filter\n        filteredRecordsArray_4.forEach((el) => {\n            let addFlag = false\n\n            selectedCountry.forEach((selectedFiltr) => {\n                if (el.country === selectedFiltr) {\n                    addFlag = true\n                }\n            })\n\n            if (addFlag) {\n                filteredRecordsArray_5.push(el)\n            }\n        })\n    } else {\n        filteredRecordsArray_5 = filteredRecordsArray_4\n    }\n\n    let filteredRecordsArray_6 = filteredRecordsArray_5\n\n    // selectedCity & selectedDistance ////////////////\n\n    let selectedCity = [];\n\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_city_filter.length) {\n        selectedCity = filterConfigData.location_city_filter\n        // cityLoc.style.display = \"none\"\n\n        let selectedCityOnList = Array.from(citiesChildrenLoc).filter(function (elem) {\n            if (elem.value) {\n                return elem.checked\n            }\n        })\n\n        if (selectedCityOnList.length > 0) {\n\n            selectedCity = Array.from(citiesChildrenLoc)\n            .filter(function (elem) {\n                if (elem.value) {\n                    return elem.checked\n                }\n            })\n            .map(function (elem) {\n                if (elem.value) {\n                    return [elem.value, elem.dataset.county]\n                }\n            })\n        }\n\n    } else {\n        selectedCity = Array.from(citiesChildrenLoc)\n        .filter(function (elem) {\n            if (elem.value) {\n                return elem.checked\n            }\n        })\n        .map(function (elem) {\n            if (elem.value) {\n                return [elem.value, elem.dataset.county]\n            }\n        })\n    }\n    \n    let filteredRecordsArray_7 = []\n\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\n        distanceLoc.style.display = \"none\"\n    }\n\n    if (selectedCity.length) {\n        \n        let selectedDistance = parseInt(distanceTitleLoc.dataset.distance)\n\n        let lati\n        let longi\n        let min_lati\n        let max_lati\n        let min_longi\n        let max_longi\n\n        selectedCity.forEach((el_city) => {\n\n            min_lati = 0\n            max_lati = 0\n            min_longi = 0\n            max_longi = 0\n\n            filteredRecordsArray_6.forEach((el_record) => {\n                \n                if (el_city[1] !== \"\") {\n                    if (el_city[0] === el_record.city && el_city[1] === el_record.county) {\n                        lati = el_record.lati\n                        longi = el_record.longi\n                        if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\n                            selectedDistance = filterConfigData.location_distance\n                            distanceLoc.style.display = \"none\"\n                        }\n                        min_lati = lati - selectedDistance * 0.009044\n                        max_lati = lati + selectedDistance * 0.009044\n                        min_longi = longi - (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180)\n                        max_longi = longi + (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180)\n                    }\n                } else {\n                    if (el_city[0] === el_record.city) {\n                        lati = el_record.lati\n                        longi = el_record.longi\n                        if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\n                            selectedDistance = filterConfigData.location_distance\n                            distanceLoc.style.display = \"none\"\n                        }\n                        min_lati = lati - selectedDistance * 0.009044\n                        max_lati = lati + selectedDistance * 0.009044\n                        min_longi = longi - (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180)\n                        max_longi = longi + (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180)\n                    }\n                }\n\n                if (\n                    el_record.lati <= max_lati &&\n                    el_record.lati >= min_lati &&\n                    el_record.longi <= max_longi &&\n                    el_record.longi >= min_longi\n                ) {\n                    filteredRecordsArray_7.push(el_record)\n                }\n            })\n        })\n        \n    } else {\n        filteredRecordsArray_7 = filteredRecordsArray_6\n    }\n   \n    // selectedRemote ////////////////\n\n    let filteredRecordsArray_8 = [];\n\n        if (remoteInputLoc.checked || filterConfigData.remote_filter) {\n            filteredRecordsArray_7.forEach((el) => {\n                let addFlag = false\n\n                if (el.remote) {\n                    addFlag = true\n                }\n\n                if (addFlag) {\n                    filteredRecordsArray_8.push(el)\n                }\n            })\n        \n        } else {\n            filteredRecordsArray_8 = filteredRecordsArray_7\n        }\n\n    // selectedRelocation ////////////////\n    let filteredRecordsArray_9 = []\n\n    if (relocationInputLoc.checked) {\n        filteredRecordsArray_8.forEach((el) => {\n            let addFlag = false\n\n            if (el.relocation) {\n                addFlag = true\n            }\n\n            if (addFlag) {\n                filteredRecordsArray_9.push(el)\n            }\n        })\n    } else {\n        filteredRecordsArray_9 = filteredRecordsArray_8\n    }\n\n    // searchText ////////////////\n\n    let filteredRecordsArray_10 = []\n\n    let searchText = searchInputLoc.value\n\n    if (searchText) {\n        filteredRecordsArray_9.forEach((el) => {\n            let addFlag = false\n\n            let position\n\n            el.description.forEach(function (elem) {\n                if (elem.value && elem.field_id !== \"geolocation\") {\n                    position = elem.value\n                        .toLowerCase()\n                        .search(searchText.toLowerCase());\n                    if (position !== -1) {\n                        addFlag = true\n                    }\n                }\n            })\n\n            position = el.name.toLowerCase().search(searchText.toLowerCase())\n            if (position !== -1) {\n                addFlag = true\n            }\n\n            if (addFlag) {\n                filteredRecordsArray_10.push(el)\n            }\n        })\n    } else {\n        filteredRecordsArray_10 = filteredRecordsArray_9\n    }\n\n    // selectedRecruitmentType (coloring of records) ////////////////\n\n    filteredRecordsArray_11 = []\n    \n    let selectedRecruitmentType = []\n\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.recruitmentType_filter.length) {\n        selectedRecruitmentType = filterConfigData.recruitmentType_filter\n        filteredRecordsArray_10.forEach((el) => {\n            let addFlag = false\n\n            selectedRecruitmentType.forEach((selectedFiltr) => {\n                if (el.recruitmentType === selectedFiltr) {\n                    addFlag = true\n                }\n            })\n\n            if (addFlag) {\n                filteredRecordsArray_11.push(el)\n            }\n        })\n    }  else {\n        filteredRecordsArray_11 = filteredRecordsArray_10\n    }\n\n    recordsNumber = filteredRecordsArray_11.length\n\n    createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage)\n  \n    setPages(recordsNumber)\n    filtersON = true\n\n    // setParentIframeHeight()\n}\n\nconst pagesContainerStart = () => {\n    pagesContainer.classList.add(\"active\");\n};\n\nconst dropDownBtnStart = () => {\n    dropDownLoc.addEventListener(\"click\", showHideFilters);\n\n    dropDownLoc.classList.add(\"active\");\n};\n\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\nconst createFilterLists = (filterConfigData) => {\n\n    if (filterConfigData) {\n        if (!filterConfigData.relocation_visible) {\n            relocationLoc.classList.add(\"unactive\");\n        }\n    \n        if (!filterConfigData.language_visible) {\n            languageLoc.classList.add(\"unactive\");\n        }\n    \n        if (!filterConfigData.remote_visible) {\n            remoteLoc.classList.add(\"unactive\");\n        }\n    \n        if (!filterConfigData.location_visible) {\n            cityLoc.classList.add(\"unactive\");\n            distanceLoc.classList.add(\"unactive\");\n        }\n    \n        if (!filterConfigData.branche_visible) {\n            sectorLoc.classList.add(\"unactive\");\n        }\n    }\n    \n    if (filterBranchesList.length > 0) {\n        filterBranchesList.sort(function (a, b) {\n            return a.localeCompare(b);\n        });\n        \n        filterBranchesList.forEach(function (el) {\n\n            const lang_PL_branche_id = translate_dynamic.branza[\"PL\"].indexOf(el)\n            const branche_in_lang = translate_dynamic.branza[lang][lang_PL_branche_id]\n\n            branchesLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<li>\n                <div class=\"checkbox-container-small\">\n                    <label class=\"checkbox\">\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${branche_in_lang}\">\n                        <span class=\"checkmark\"></span>\n                    </label>\n                    <label class=\"label-text\" for=\"${el}\">${branche_in_lang}</label>\n                </div>\n            </li>`\n            );\n        });\n    }\n\n    if (filterJobFormList.length > 0) {\n        filterJobFormList.sort(function (a, b) {\n            return a.localeCompare(b);\n        });\n\n        filterJobFormList.forEach(function (el) {\n\n            const lang_PL_JobForm_id = translate_dynamic.forma[\"PL\"].indexOf(el)\n            const jobForm_in_lang = translate_dynamic.forma[lang][lang_PL_JobForm_id]\n\n            jobFormLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<li>\n                <div class=\"checkbox-container-small\">\n                    <label class=\"checkbox\">\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${jobForm_in_lang}\">\n                        <span class=\"checkmark\"></span>\n                    </label>\n                    <label class=\"label-text\" for=\"${el}\">${jobForm_in_lang}</label>\n                </div>\n            </li>`\n            );\n        });\n    }\n\n    if (filterJobTypeList.length > 0) {\n\n        filterJobTypeList.sort(function (a, b) {\n            return a.localeCompare(b);\n        });\n\n        filterJobTypeList.forEach(function (el) {\n\n            const lang_PL_JobType_id = translate_dynamic.wymiar[\"PL\"].indexOf(el)\n            const jobType_in_lang = translate_dynamic.wymiar[lang][lang_PL_JobType_id]\n\n            jobTypeLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<li>\n                <div class=\"checkbox-container-small\">\n                    <label class=\"checkbox\">\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${jobType_in_lang}\">\n                        <span class=\"checkmark\"></span>\n                    </label>\n                    <label class=\"label-text\" for=\"${el}\">${jobType_in_lang}</label>\n                </div>\n            </li>`\n            );\n        });\n    }\n\n    if (filterLangList.length > 0) {\n        filterLangList.sort(function (a, b) {\n            return a.localeCompare(b);\n        });\n\n        filterLangList.forEach(function (el) {\n            langLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<li>\n                <div class=\"checkbox-container-small\">\n                    <label class=\"checkbox\">\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\n                        <span class=\"checkmark\"></span>\n                    </label>\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\n                </div>\n            </li>`\n            );\n        });\n    }\n\n    if (Object.keys(filterCountriesList).length > 0) {\n\n        function compare(a, b) {\n            return a.cityCountyArray[0].localeCompare(b.cityCountyArray[0]);\n        }\n\n        for (let key in filterCountriesList) {\n            filterCountriesList[key].sort(compare);\n        } \n\n        let allCitiesObj = [];\n        for (let key in filterCountriesList) {\n            allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\n        }\n\n        let allCitiesArray = [];\n        allCitiesObj.forEach((el) => {\n            allCitiesArray.push(el.cityCountyArray);\n        })\n\n        allCitiesArray.forEach((elem, index) => {\n            let duplicateExist = false\n            allCitiesArray.forEach((elm, id) => {\n                if (elem[0] === elm[0] && index !== id) {\n                    duplicateExist = true\n                }\n            })\n            if (!duplicateExist) {\n                allCitiesArray[index][1] = \"\"\n            }\n        })\n    \n        allCitiesArray.sort(function ([a], [b]) {\n            return a[0].localeCompare(b[0]);\n        });\n\n        allCitiesArray.forEach(function (el) {\n            let cityText\n            el[1] ? cityText = el[0] + \" (pow. \" + el[1] + \")\" : cityText = el[0]\n\n            citiesLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<li>\n                <div class=\"checkbox-container-small\">\n                    <label class=\"checkbox\">\n                        <input type=\"checkbox\" id=\"${cityText}\" name=\"${cityText}\" value=\"${el[0]}\" data-county=\"${el[1]}\">\n                        <span class=\"checkmark\"></span>\n                    </label>\n                    <label class=\"label-text\" for=\"${cityText}\">${cityText}</label>\n                </div>\n            </li>`\n            );\n        });\n    }\n};\n\n// PAGES /////////////////////////////////////////////////////////////\nlet globActivePageNo;\n\nconst changePage = (pageBtn) => {\n    pageButtonsLoc.forEach((el) => {\n        el.classList.remove(\"active\");\n    });\n    pageBtn.classList.add(\"active\");\n    let firstRecord =\n        recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\n\n    filtersON\n        ? createRecordBoxes(filteredRecordsArray_11, firstRecord, lastRecord)\n        : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\n    globActivePageNo = parseInt(pageBtn.innerText);\n\n    // setParentIframeHeight()\n};\n\nconst movePrevPagesBtns = () => {\n    let firstDispalyedPageNo = parseInt(\n        Array.from(document.querySelectorAll(\".page\")).shift().innerText\n    );\n    let lastDispalyedPageNo = parseInt(\n        Array.from(document.querySelectorAll(\".page\")).pop().innerText\n    );\n\n    let activePageNo;\n    activePageNo = document.querySelector(\".page.active\");\n\n    if (activePageNo) {\n        activePageNo = parseInt(activePageNo.innerText);\n    }\n\n    if (firstDispalyedPageNo > 1) {\n        pagesSwitchLoc.replaceChildren();\n\n        for (let n = firstDispalyedPageNo - 1; n <= lastDispalyedPageNo - 1; n++) {\n            if (!activePageNo) {\n                activePageNo = globActivePageNo;\n            }\n            if (activePageNo && n === activePageNo) {\n                pagesSwitchLoc.insertAdjacentHTML(\n                    \"beforeend\",\n                    `<div class=\"page active\">${n}</div>`\n                );\n            } else {\n                pagesSwitchLoc.insertAdjacentHTML(\n                    \"beforeend\",\n                    `<div class=\"page\">${n}</div>`\n                );\n            }\n        }\n\n        if (lastDispalyedPageNo < pagesQuantityCalc + 1) {\n            pagesSwitchLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\n            );\n            let nextBtnLoc = document.querySelector(\".next\");\n            nextBtnLoc.addEventListener(\"click\", () => {\n                moveNextPagesBtns();\n            });\n        } else {\n            pagesSwitchLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\n            );\n        }\n\n        if (firstDispalyedPageNo > 2) {\n            pagesSwitchLoc.insertAdjacentHTML(\n                \"afterbegin\",\n                `<div class=\"prev active\"><img src=\"./img/chevron-left.svg\" alt=\"\" /></div>`\n            );\n            let prevBtnLoc = document.querySelector(\".prev\");\n            prevBtnLoc.addEventListener(\"click\", () => {\n                movePrevPagesBtns();\n            });\n        } else {\n            pagesSwitchLoc.insertAdjacentHTML(\n                \"afterbegin\",\n                `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\n            );\n        }\n\n        pageButtonsLoc = document.querySelectorAll(\".page\");\n        pageButtonsLoc.forEach((el) => {\n            el.addEventListener(\"click\", (e) => {\n                changePage(e.target);\n            });\n        });\n    }\n};\n\nconst moveNextPagesBtns = () => {\n    let firstDispalyedPageNo = parseInt(\n        Array.from(document.querySelectorAll(\".page\")).shift().innerText\n    );\n    let lastDispalyedPageNo = parseInt(\n        Array.from(document.querySelectorAll(\".page\")).pop().innerText\n    );\n\n    let activePageNo;\n    activePageNo = document.querySelector(\".page.active\");\n    if (activePageNo) {\n        activePageNo = parseInt(activePageNo.innerText);\n        globActivePageNo = activePageNo;\n    }\n\n    if (lastDispalyedPageNo < pagesQuantityCalc) {\n        pagesSwitchLoc.replaceChildren();\n\n        for (let n = firstDispalyedPageNo + 1; n <= lastDispalyedPageNo + 1; n++) {\n            if (!activePageNo) {\n                activePageNo = globActivePageNo;\n            }\n            if (activePageNo && n === activePageNo) {\n                pagesSwitchLoc.insertAdjacentHTML(\n                    \"beforeend\",\n                    `<div class=\"page active\">${n}</div>`\n                );\n            } else {\n                pagesSwitchLoc.insertAdjacentHTML(\n                    \"beforeend\",\n                    `<div class=\"page\">${n}</div>`\n                );\n            }\n        }\n\n        if (lastDispalyedPageNo < pagesQuantityCalc - 1) {\n            pagesSwitchLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\n            );\n            let nextBtnLoc = document.querySelector(\".next\");\n            nextBtnLoc.addEventListener(\"click\", () => {\n                moveNextPagesBtns();\n            });\n        } else {\n            pagesSwitchLoc.insertAdjacentHTML(\n                \"beforeend\",\n                `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\n            );\n        }\n\n        if (firstDispalyedPageNo > 0) {\n            pagesSwitchLoc.insertAdjacentHTML(\n                \"afterbegin\",\n                `<div class=\"prev active\"><img src=\"./img/chevron-left.svg\" alt=\"\" /></div>`\n            );\n            let prevBtnLoc = document.querySelector(\".prev\");\n            prevBtnLoc.addEventListener(\"click\", () => {\n                movePrevPagesBtns();\n            });\n        } else {\n            pagesSwitchLoc.insertAdjacentHTML(\n                \"afterbegin\",\n                `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\n            );\n        }\n\n        pageButtonsLoc = document.querySelectorAll(\".page\");\n        pageButtonsLoc.forEach((el) => {\n            el.addEventListener(\"click\", (e) => {\n                changePage(e.target);\n            });\n        });\n    }\n};\n\n// RWD /////////////////////////////////////////////////////////////\nfunction getWidth() {\n    return Math.max(\n        document.body.scrollWidth,\n        document.documentElement.scrollWidth,\n        document.body.offsetWidth,\n        document.documentElement.offsetWidth,\n        document.documentElement.clientWidth\n    );\n}\n\nfunction getHeight() {\n    return Math.max(\n        document.body.scrollHeight,\n        document.documentElement.scrollHeight,\n        document.body.offsetHeight,\n        document.documentElement.offsetHeight,\n        document.documentElement.clientHeight\n    );\n}\n\nlet pagesQuantityCalc;\n\nlet maxPageBtns;\n\nconst setPagesBtnQuantity = () => {\n\nlet newMaxPageBtns;\n\n    if (getWidth() < 500) {newMaxPageBtns = 3}\n    if (getWidth() >= 500 && getWidth() < 650) {newMaxPageBtns = 3}\n    if (getWidth() >= 650 && getWidth() < 750) {newMaxPageBtns = 4}\n    if (getWidth() >= 750 && getWidth() < 950) {newMaxPageBtns = 7}\n    if (getWidth() >= 950 && getWidth() < 1200) {newMaxPageBtns = 12}\n    if (getWidth() >= 1200) {newMaxPageBtns = 15}\n\n    if (newMaxPageBtns !== maxPageBtns) {\n        maxPageBtns = newMaxPageBtns\n        setPages(recordsNumber);\n    }\n}\n\nwindow.addEventListener(\"resize\", () => {\n    setPagesBtnQuantity();\n});\n\nsetPagesBtnQuantity();\n\nconst filterAwarded = (configFilterArray, awardedRecordsArray, property) => {\n    \n    for (let i = awardedRecordsArray.length-1; i>=0; i--) {\n\n        let findFlag = false;\n        configFilterArray.forEach((element)=>{\n          \n            if (awardedRecordsArray[i][property] === element) {\n                findFlag = true;\n            }\n        })\n\n        if (!findFlag) {\n            awardedRecordsArray.splice(i, 1)\n        }\n    }\n}\n\n// create AWARDED RECORDS BOXES ///////////////////////////////////////////////\nconst createAwardedRecordBoxes = (recordsArray, filterConfigData) => {\n\n    awardedResultsLoc.replaceChildren();\n\n    let awardedRecordsArray = recordsArray.filter((elem) => {\n        return elem.awarded;  \n    });\n\n    if (awardedRecordsArray.length > 0) {\n\n        if (filterConfigData) {\n\n            if (filterConfigData.remote_filter) {\n                awardedRecordsArray = awardedRecordsArray.filter((elem) => {\n                    return elem.remote;\n                });\n            }\n            \n            if (filterConfigData.language_filter.length > 0) {\n                filterAwarded(filterConfigData.language_filter, awardedRecordsArray, \"lang\");\n            }\n\n            if (filterConfigData.branche_filter.length > 0) {\n                filterAwarded(filterConfigData.branche_filter, awardedRecordsArray, \"branche\");\n            }\n\n            if (filterConfigData.location_country_filter.length > 0) {\n                filterAwarded(filterConfigData.location_country_filter, awardedRecordsArray, \"country\");\n            }\n\n            if (filterConfigData.location_city_filter.length > 0) {\n                filterAwarded(filterConfigData.location_city_filter, awardedRecordsArray, \"city\");\n            }\n\n            if (filterConfigData.recruitmentType_filter.length > 0) {\n                filterAwarded(filterConfigData.recruitmentType_filter, awardedRecordsArray, \"recruitmentType\");\n            }\n\n        }\n\n        for (let i = firstRecordNumber; i < 10; i++) {\n            if (awardedRecordsArray[i]) {\n                let borderColorClass = \"\";\n                let textColorClass = \"\";\n\n                if (awardedRecordsArray[i].recruitmentType === \"PT\") {\n                    borderColorClass = \"pt-border\";\n                    textColorClass = \"pt-text\";\n                }\n                if (awardedRecordsArray[i].recruitmentType === \"RS\") {\n                    borderColorClass = \"rs-border\";\n                    textColorClass = \"rs-text\";\n                }\n                if (awardedRecordsArray[i].recruitmentType === \"WEW\") {\n                    borderColorClass = \"wew-border\";\n                    textColorClass = \"wew-text\";\n                }\n\n                let formaZatrudnienia = \"\";\n\n                if (awardedRecordsArray[i].jobForm) {\n                    awardedRecordsArray[i].jobForm.forEach(function (elem) {\n\n                        const lang_PL_jobForm_id = translate_dynamic.forma[\"PL\"].indexOf(elem)\n                        const jobForm_in_lang = translate_dynamic.forma[lang][lang_PL_jobForm_id]\n\n                        formaZatrudnienia = formaZatrudnienia + \"<p>\" + jobForm_in_lang + \"</p>\";\n                    });\n                }\n\n\n                const lang_PL_branche_id = translate_dynamic.branza[\"PL\"].indexOf(awardedRecordsArray[i].branche)\n                const branche_in_lang = translate_dynamic.branza[lang][lang_PL_branche_id]\n    \n                const lang_PL_jobType_id = translate_dynamic.wymiar[\"PL\"].indexOf(awardedRecordsArray[i].jobType)\n                const jobType_in_lang = translate_dynamic.wymiar[lang][lang_PL_jobType_id]\n\n                let remote_in_lang;\n            \n                if (awardedRecordsArray[i].remote === \"1\") {\n                    remote_in_lang = translate_dynamic.zdalna[lang][0]\n                }\n\n                let relocation_in_lang;\n\n                if (awardedRecordsArray[i].relocation === \"1\") {\n                    relocation_in_lang = translate_dynamic.relokacja[lang][0]\n                }\n\n\n                awardedResultsLoc.insertAdjacentHTML(\n                    \"beforeend\",\n                    `<a href=\"${\n                        awardedRecordsArray[i].url\n                    }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\n                <div class=\"top\">\n                \n                        <div class=\"lang\">\n                            <p>${awardedRecordsArray[i].lang}</p>\n                        </div>\n                        <div class=\"branche-name\">\n                            <div class=\"branche\">${\n                                branche_in_lang\n                                    ? branche_in_lang\n                                    : \"\"\n                            }</div>\n                            <div class=\"name ${textColorClass}\">${\n                        awardedRecordsArray[i].name\n                    }</div>\n                        </div>\n                    \n                </div>\n\n                <div class=\"bottom\">\n                    <div class=\"city-container\">\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\n                            awardedRecordsArray[i].city\n                        }</div></div>\n                        <div class=\"details-container\">\n                        ${\n                            remote_in_lang\n                                ? \"<div class='remote'>\" + remote_in_lang + \"</div>\"\n                                : \"\"\n                        }\n                        ${\n                            relocation_in_lang\n                                ? \"<div class='relocation'>\" + relocation_in_lang + \"</div>\"\n                                : \"\"\n                        }\n                        ${\n                            jobType_in_lang\n                                ? \"<div class='jobtype'>\" +\n                                jobType_in_lang +\n                                \"</div>\"\n                                : \"\"\n                        }\n                        ${\n                            awardedRecordsArray[i].visibleRate\n                                ? awardedRecordsArray[i].salaryFrom &&\n                                awardedRecordsArray[i].salaryTo\n                                    ? \"<div class='salary'>\" +\n                                    awardedRecordsArray[i].salaryFrom +\n                                    \" - \" +\n                                    awardedRecordsArray[i].salaryTo +\n                                    \"</div>\"\n                                    : \"\"\n                                : \"\"\n                        }\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\n                        </div>\n                    \n                </div>\n\n                <div class=\"ribbon-wrap\">\n                        <div class=\"ribbon\">\n                                <img src=\"./img/star.svg\" alt=\"\">\n                                <img src=\"./img/star.svg\" alt=\"\">\n                                <img src=\"./img/star.svg\" alt=\"\">\n                            </div>\n                        </div>\n                </div>\n\n            </div></a>`\n                );\n            }\n        }\n    } else {\n        awardedResultsLoc.style.margin = \"0\"\n    }\n}\n\n// show RECORDS NUMBER ///////////////////////////////////////////////\n// const summariseDownload = (recordsNumber) => {\n//     recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\n//     if (!recordsNumber) {\n//         noResultsLoc.classList.add(\"active\");\n//     } else {\n//         noResultsLoc.classList.remove(\"active\");\n//     }\n// }\n\n// create FILTER DATA from API data ///////////////////////////////////////////////\n\nconst createDataForFilters = (\n    branche,\n    jobForm,\n    jobType,\n    lang,\n    visibleRate,\n    salaryFrom,\n    salaryTo,\n    country,\n    cityCountyArray,\n    lati,\n    longi\n    ) => {\n\n    // BranchesList\n   \n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\n        if (Object.keys(filterConfigData).length !== 0 && filterConfigData.branche_filter.length) {\n            if (filterConfigData.branche_filter.indexOf(branche) !== -1) {\n                filterBranchesList.push(branche)\n            }\n        } else {\n            filterBranchesList.push(branche)\n        }\n    }\n\n    // JobFormList\n\n    if (jobForm) {\n        jobForm.forEach((elem) => {\n            if (filterJobFormList.indexOf(elem) === -1) {\n                filterJobFormList.push(elem)\n            }\n        })\n    }\n\n    // JobTypeList\n\n    if (Array.isArray(jobType)) {\n        jobType = jobType[0]\n    }\n\n    if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\n        filterJobTypeList.push(jobType)\n    }\n\n    // LangList\n\n    if (filterLangList.indexOf(lang) === -1) {\n        if (Object.keys(filterConfigData).length !== 0) {\n            if (filterConfigData.language_filter.length) {\n                if (filterConfigData.language_filter.indexOf(lang) !== -1) {\n                    filterLangList.push(lang)\n                }\n            } else {\n                filterLangList.push(lang)\n            }\n        } else {\n            filterLangList.push(lang)\n        }\n    }\n\n    // CountriesList\n\n    let itemFilterExists = false\n\n    if (Object.keys(filterConfigData).length !== 0) {\n        if (!filterCountriesList[country]) {\n            filterCountriesList[country] = []\n        }\n\n        if (filterConfigData.location_city_filter.length) { // gdy w config jest city filter wypełnione\n            for (let i=0; i<filterConfigData.location_city_filter.length; i++) {\n                if (filterConfigData.location_city_filter[i][1] !== \"\") {\n                    if (filterConfigData.location_city_filter[i][0] === cityCountyArray[0] && filterConfigData.location_city_filter[i][1] === cityCountyArray[1]) {\n                        for (let k=0; k<filterCountriesList[country].length; k++) {\n                            if (filterCountriesList[country][k][\"cityCountyArray\"][0] === cityCountyArray[0] && filterCountriesList[country][k][\"cityCountyArray\"][1] === cityCountyArray[1]) {\n                                itemFilterExists = true\n                                break\n                            }\n                        }\n                        if (!itemFilterExists) {\n                            filterCountriesList[country].push({\n                                cityCountyArray: cityCountyArray,\n                                lati: lati,\n                                longi: longi,\n                            });\n                        }\n                    }\n                } else {\n                    if (filterConfigData.location_city_filter[i][0] === cityCountyArray[0]) {\n                        for (let k=0; k<filterCountriesList[country].length; k++) {\n                            if (filterCountriesList[country][k][\"cityCountyArray\"][0] === cityCountyArray[0]) {\n                                itemFilterExists = true\n                                break\n                            }\n                        }\n                        if (!itemFilterExists) {\n                            filterCountriesList[country].push({\n                                cityCountyArray: cityCountyArray,\n                                lati: lati,\n                                longi: longi,\n                            });\n                        }\n                    }\n                }\n            }\n        } else if (filterConfigData.location_country_filter.length) { // gdy w config jest country filter wypełnione\n            for (let i=0; i<filterConfigData.location_country_filter.length; i++) {\n                if (filterConfigData.location_country_filter.indexOf(country) !== -1) {\n                    for (let k=0; k<filterCountriesList[country].length; k++) {\n                        if (filterCountriesList[country][k][\"cityCountyArray\"][0] === cityCountyArray[0] && filterCountriesList[country][k][\"cityCountyArray\"][1] === cityCountyArray[1]) {\n                            itemFilterExists = true\n                            break\n                        }\n                    }\n                    if (!itemFilterExists) {\n                        filterCountriesList[country].push({\n                            cityCountyArray: cityCountyArray,\n                            lati: lati,\n                            longi: longi,\n                        });\n                    }\n                }\n            }\n        } else { // jezeli w pliku config nie ma ustawionego filtra: location_country_filter ani location_city_filter\n\n            for (let k=0; k<filterCountriesList[country].length; k++) {\n                if (filterCountriesList[country][k][\"cityCountyArray\"][0] === cityCountyArray[0] && filterCountriesList[country][k][\"cityCountyArray\"][1] === cityCountyArray[1]) {\n                    itemFilterExists = true\n                    break\n                }\n            }\n            \n            if (!itemFilterExists) {\n                filterCountriesList[country].push({\n                    cityCountyArray: cityCountyArray,\n                    lati: lati,\n                    longi: longi,\n                });\n            }\n        }\n    } else { // jeżeli nie ma pliku config.json\n\n        if (!filterCountriesList[country]) {\n            filterCountriesList[country] = []\n        }\n\n        for (let k=0; k<filterCountriesList[country].length; k++) {\n            if (filterCountriesList[country][k][\"cityCountyArray\"][0] === cityCountyArray[0] && filterCountriesList[country][k][\"cityCountyArray\"][1] === cityCountyArray[1]) {\n                itemFilterExists = true\n                break\n            }\n        }\n        \n        if (!itemFilterExists) {\n            filterCountriesList[country].push({\n                cityCountyArray: cityCountyArray,\n                lati: lati,\n                longi: longi,\n            });\n        }\n    }\n}\n\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\nconst reworkData = (rawAPIArray) => {\n\n    rawAPIArray.forEach((el) => {\n\n        let parsedJobLocation;\n        if (el.options.job_location) {\n            parsedJobLocation = JSON.parse(el.options.job_location);\n        }\n\n        allRecordsArray.push({\n            url: el.url,\n            name: el.advert.name,\n            branche: el.options.branches,\n            lang: el.advert.language,\n            jobType: el.options.job_type,\n            visibleRate: parseInt(el.options._Widoczna_stawka),\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\n            remote: el.options.remote,\n            relocation: el.options._relokacja,\n            recruitmentType: el.options._rekrutacja_rodzaj,\n            jobForm: el.options._forma_zatrudnienia,\n            country: parsedJobLocation.country,\n            city: parsedJobLocation.locality,\n            county: parsedJobLocation.region2,\n            lati: parseFloat(parsedJobLocation.latitude),\n            longi: parseFloat(parsedJobLocation.longitude),\n            description: el.advert.values,\n            awarded: el.awarded,\n        });\n\n        let filtersFlag = true\n\n        if (filterConfigData.branche_filter.length && filtersFlag) {\n            filtersFlag = false\n            filterConfigData.branche_filter.forEach((elem1) => {\n                if (el.options.branches === elem1) {\n                    filtersFlag = true\n                }\n            })\n        }\n\n        if (filterConfigData.language_filter.length && filtersFlag) {\n            filtersFlag = false\n            filterConfigData.language_filter.forEach((elem2) => {\n                if (el.advert.language === elem2) {\n                    filtersFlag = true\n                }\n            })\n        }\n\n        if (filterConfigData.location_country_filter.length && filtersFlag) {\n            filtersFlag = false\n            filterConfigData.location_country_filter.forEach((elem3) => {\n                if (parsedJobLocation.country === elem3) {\n                    filtersFlag = true\n                }\n            })\n        }\n\n        if (filterConfigData.location_city_filter.length && filtersFlag) {\n            filtersFlag = false\n            filterConfigData.location_city_filter.forEach((elem4) => {\n                if (parsedJobLocation.locality === elem4[0]) {\n                    if (elem4[1] !== \"\") {\n                        if (parsedJobLocation.region2 === elem4[1]) {\n                            filtersFlag = true\n                        }\n                    } else {\n                        filtersFlag = true\n                    }\n                }\n            })\n        }\n\n        if (filtersFlag === true) {\n       \n            createDataForFilters(\n                el.options.branches,\n                el.options._forma_zatrudnienia,\n                el.options.job_type,\n                el.advert.language,\n                parseInt(el.options._Widoczna_stawka),\n                parseInt(el.options._spodziewane_wynagrodzenie_od),\n                parseInt(el.options._spodziewane_wynagrodzenie_do),\n                parsedJobLocation.country,\n                [parsedJobLocation.locality, parsedJobLocation.region2],\n                parseFloat(parsedJobLocation.latitude),\n                parseFloat(parsedJobLocation.longitude)\n            )\n        }\n    })\n}\n\n// gets DATA FROM API ///////////////////////////////////////////////\nconst getAPI = (apiPage) => {\n    const response = fetch(\n        \"https://grupaprogres.traffit.com/public/job_posts/published\",\n        // \"./config/response.json\",\n        {\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Request-Page-Size\": \"100\",\n                \"X-Request-Current-Page\": apiPage,\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\n            },\n        }\n    );\n\n    return response;\n}\n\n// gets DATA FROM API 2 ///////////////////////////////////////////////\nconst getAPI_2 = (apiPage) => {\n    const response = fetch(\n        \"https://rsgrupaprogres.traffit.com/public/job_posts/published\",\n        {\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Request-Page-Size\": \"100\",\n                \"X-Request-Current-Page\": apiPage,\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\n            },\n        }\n    );\n\n    return response;\n}\n\nconst loopOnAPI = (jsonData, filterConfigData) => {\n    if (jsonData.length > 0 && apiNumber === 1) {\n        rawAPIArray = rawAPIArray.concat(jsonData)\n        apiPage++\n        createRecordsObjFromAPI(apiPage, filterConfigData)\n    } else if (jsonData.length === 0  && apiNumber === 1) {\n        apiPage = 1\n        createRecordsObjFromAPI_2(apiPage, filterConfigData)\n    } else if (jsonData.length > 0  && apiNumber === 2) {\n        rawAPIArray = rawAPIArray.concat(jsonData)\n        apiPage++\n        createRecordsObjFromAPI_2(apiPage, filterConfigData)\n    } else {\n        reworkData(rawAPIArray)\n        recordsNumber = rawAPIArray.length\n        createAwardedRecordBoxes(allRecordsArray, filterConfigData)\n        setPages(recordsNumber)\n        createFilterLists(filterConfigData)\n        addListenerToFilterListsElements()\n        createFilteredRecordsArray()\n        distanceInputsLoc.forEach((elem) => {\n            elem.checked = false\n        })\n        jobInputLoc.value = \"\"\n    }\n}\n\nasync function createRecordsObjFromAPI(apiPage, filterConfigData) {\n    apiNumber = 1\n    const rawData = await getAPI(apiPage)\n    const jsonData = await rawData.json()\n    loopOnAPI(jsonData, filterConfigData)\n}\n\nasync function createRecordsObjFromAPI_2(apiPage, filterConfigData) {\n    apiNumber = 2\n    const rawData = await getAPI_2(apiPage)\n    const jsonData = await rawData.json()\n    loopOnAPI(jsonData, filterConfigData)\n}\n\n// consider configuration filters ////////////////////////\nconst getConfigFilter = () => {\n    const response = fetch(\"./config/config.json\");\n    return response;\n}\n\nasync function readConfigFilter() {\n    try {\n        const rawData = await getConfigFilter();\n        filterConfigData = await rawData.json();\n        createRecordsObjFromAPI(apiPage, filterConfigData);\n        loadLanguages();\n    } catch (e) {\n        console.error(e);\n        createRecordsObjFromAPI(apiPage);\n    }\n}\n\nreadConfigFilter();\n\n// change RECORDS QUANTITY ON PAGE //////////////////////////////////////////////////\nrecordsOnPageLoc.addEventListener(\"change\", (e) => {\n    recordsOnPage = parseInt(e.target.value);\n\n    filtersON\n        ? createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage)\n        : createRecordBoxes(allRecordsArray, 0, recordsOnPage);\n    setPages(recordsNumber);\n\n    // setParentIframeHeight()\n})\n\n// SEARCH LISTENER /////////////////////////////////////////////////////////////\nsearchBtn.addEventListener(\"click\", createFilteredRecordsArray);\n\nadvancedSearchBar.addEventListener(\"click\", () => {\n    advancedContainer.classList.toggle(\"showed\");\n    advancedSearchBtn.classList.toggle(\"rotate180\");\n    // setParentIframeHeight()\n})\n\nconst clearAllFiltersLoc = document.querySelector(\".clear-all-filters\")\n\nclearAllFiltersLoc.addEventListener(\"click\", () => {\n\n    filterListLocArray.forEach((elem, index) => {\n\n        const clearBtn = elem.querySelector(\".clear-btn\");\n        const filtersQuantityBtn = elem.querySelector(\".filters-quantity\");\n        const filtersSelectedOptions = elem.querySelector(\".selected-options\");\n        const filtersListTitle = elem.querySelector(\".list-title\");\n\n        selectedOptionsInFilterArray[index] = [];\n        clearBtn.style.opacity = \"0\";\n        elem.querySelectorAll(\"input\").forEach((el) => {\n            el.checked = false;\n        })\n        filtersSelectedOptions.innerText = \"\";\n        filtersListTitle.classList.remove(\"mini\");\n        filtersQuantityBtn.style.opacity = \"0\";\n    })\n\n    jobInputLoc.value = \"\";\n    jobLabelLoc.classList.remove(\"mini\");\n    jobInputLoc.classList.remove(\"active\");\n    jobClearBtnLoc.style.opacity = \"0\";\n    jobClearBtnLoc.style.display = \"none\";\n\n    distanceLoc.querySelectorAll(\"input\").forEach((elem) => {\n        elem.checked = false;\n    })\n    distanceListTitleLoc.innerText = \"+0 km\";\n    createFilteredRecordsArray();\n});\n\njobInputLoc.addEventListener(\"keypress\", (event) => {\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      searchBtn.click();\n    }\n});\n\njobInputLoc.addEventListener(\"blur\", () => {\n    if (jobInputLoc.value !== \"\") {\n        searchBtn.click();\n    }\n});\n\njobInputLoc.addEventListener(\"input\", () => {\n    if (jobInputLoc.value === \"\") {\n      searchBtn.click();\n    }\n});\n\nremoteInputLoc.addEventListener(\"change\", () => {\n    searchBtn.click();\n})\n\nrelocationInputLoc.addEventListener(\"change\", () => {\n    searchBtn.click();\n})\n\n// LANGUAGES\n\nconst loadLanguages = () => {\n\n    lang = filterConfigData.set_language\n\n    if (lang !== \"PL\" && lang !== \"EN\" && lang !== \"RU\" && lang !== \"UK\") { lang = \"PL\" }\n\n    const createDB = () => {\n        let openRequest = indexedDB.open(\"languageDB\", 1);\n\n        openRequest.onupgradeneeded = function () {\n            let db = openRequest.result;\n            if (!db.objectStoreNames.contains(\"language\")) {\n                db.createObjectStore(\"language\", { autoIncrement: true });\n            }\n        };\n    }\n\n    const saveLng = (lng) => {\n        let openRequest = indexedDB.open(\"languageDB\");\n\n        openRequest.onsuccess = function () {\n            let db = openRequest.result;\n            let transaction = db.transaction(\"language\", \"readwrite\");\n            let languageTrans = transaction.objectStore(\"language\");\n\n            let lang = lng;\n\n            let request = languageTrans.put(lang, \"lang\");\n\n            request.onsuccess = function () {};\n\n            request.onerror = function () {\n                console.log(\"Error\", request.error);\n            };\n        };\n    }\n\n    const getLng = () => {\n        let openRequest = indexedDB.open(\"languageDB\");\n\n        openRequest.onsuccess = function () {\n            let db = openRequest.result;\n            let transaction = db.transaction(\"language\");\n            let languageTrans = transaction.objectStore(\"language\");\n\n            let request = languageTrans.get(\"lang\");\n\n            request.onsuccess = function () {\n                languageSet(request.result)\n            }\n\n            request.onerror = function () {\n                console.log(\"Error\", request.error)\n            }\n        }\n    }\n\n    const languageSet = (lang) => {\n        for (let objKey in translate_static[lang]) {\n            document.getElementById(objKey).innerText = translate_static[lang][objKey]\n        }\n    }\n\n    createDB()\n\n    getLng()\n\n    saveLng(lang)\n\n    languageSet(lang);\n}"],"file":"main.min.js"}